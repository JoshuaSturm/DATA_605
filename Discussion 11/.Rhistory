annotate("text", x = 0.5, y = 0.375, label = paste("AUC = ", round(roc_auc, 4)))
roc_curve <- list(roc_curve_plot, roc_auc)
return(roc_curve)
}
roc_curve(m1df)
roc_curve <- function(dataset){
thrshld <- seq(from = 0, to = 1, by = 0.01)
# Sum totals of positives and negatives in the true column
P <- sum(dataset$Actual == 1)
N <- sum(dataset$Actual == 0)
# Ensure there's at least one of each classifier
stopifnot(P > 0, N > 0)
dataset <- arrange(dataset, desc(Probability))
# Initialize TPR, FPR, and temporary threshold vectors
tpr <- c()
fpr <- c()
tt <- integer(nrow(dataset))
for (i in 1:length(thrshld)){
tt <- ifelse(dataset$Probability > thrshld[i], 1, 0)
# Calculate Sensitivity and Specificity
TP <- sum(dataset$Actual == 1 & tt == 1)
TN <- sum(dataset$Actual == 0 & tt == 0)
FP <- sum(dataset$Actual == 0 & tt == 1)
FN <- sum(dataset$Actual == 1 & tt == 0)
sens <- (TP) / (P)
spec <- (TN) / (N)
tpr[i] <- sens
fpr[i] <- 1 - spec
}
# Store results in a dataframe
df <- data.frame(fpr, tpr)
# Calculate the area under the ROC curve
dfpr <- c(diff(df$fpr), 0)
dtpr <- c(diff(df$tpr), 0)
roc_auc <- abs(sum(tpr * dfpr) + sum(dtpr * dfpr)/2)
# Store variable for roc curve plot
roc_curve_plot <- ggplot(df, aes(x = fpr, y = tpr, ymin = 0, ymax = tpr, xmin = 0, xmax = 1)) +
geom_abline(intercept = 0, slope = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
labs(title=paste0("ROC Curve w/ AUC=", roc_auc), x = "False Positive Rate (1 - Specificity)", y = "True Positive Rate (Sensitivity)") +
annotate("text", x = 0.5, y = 0.375, label = paste("AUC = ", round(roc_auc, 4)))
roc_curve <- list(roc_curve_plot, roc_auc)
return(roc_curve)
}
roc_curve(m1df)
auc(m1df$Actual, m1df$Predicted)
roc_curve(m2df)
roc_curve(m3df)
auc(m3df$Actual, m3df$Predicted)
View(m1df)
# ntrain3 <- crime.training.copy[crime.split, -c(2, 3, 5, 11)]
# ntest3 <- crime.training.copy[-crime.split, -c(2, 3, 5, 11)]
ntrain3 <- crime.training.copy[crime.split, ]
ntest3 <- crime.training.copy[-crime.split, ]
tm3 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain3)
tm3_prob <- predict(object = tm3, newdata = ntest3, type = "response")
tm3_p <- ifelse(tm3_prob > 0.5,1,0)
m3df <- data.frame(ntest3$target, tm3_p, tm3_prob, row.names = NULL)
names(m3df) <- c("Actual", "Predicted", "Probability")
auc(m3df$Actual, m3df$Predicted)
View(crime.dict)
View(crime.training.copy)
ntrain3 <- crime.training.copy[crime.split, -c(2, 3, 5, 11)]
ntest3 <- crime.training.copy[-crime.split, -c(2, 3, 5, 11)]
tm3 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain3)
tm3_prob <- predict(object = tm3, newdata = ntest3, type = "response")
tm3_p <- ifelse(tm3_prob > 0.5,1,0)
m3df <- data.frame(ntest3$target, tm3_p, tm3_prob, row.names = NULL)
names(m3df) <- c("Actual", "Predicted", "Probability")
View(m2df)
View(m1df)
View(m3df)
View(roc_curve)
roc_curve(m3df)
roc_curve(m2df)
test <- roc_curve(m3df)
View(test)
rm(test)
roc(m3df$Actual ~ m3df$Probability, plot = T, auc.polygon = T)
?auv
?auc
pROC::auc(m3df$Actual, m3df$Probability, levels = c(0, 1), direction = "<")
pROC::auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<")
roc_curve(m2df)
all.equal(auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<"), roc(m3df$Actual ~ m3df$Probability))
identical(auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<"), roc(m3df$Actual ~ m3df$Probability))
test <- auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<")
test
str(test)
test$auc
test[[2]]
test[1
test[1]
identical(test[1], roc(m3df$Actual ~ m3df$Probability))
roc(m3df$Actual ~ m3df$Probability
roc(m3df$Actual ~ m3df$Probability)
test1 <- roc(m3df$Actual ~ m3df$Probability)
View(test1)
identical(test[1], test1$auc)
all.equal(test[1], test1$auc)
test1$auc
test1$auc[1]
all.equal(test[1], test1$auc[1])
identical(test[1], test1$auc[1])
rm(test, test1)
test <- roc_curve(m3df)[2]
View(test)
test
test <- roc_curve(m3df)[[2]]
tets
test
roc(m3df$Actual ~ m3df$Probability)
roc_curve(m1df)[[2]]
tm1 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain1)
tm1_prob <- predict(object = tm1, newdata = ntest1, type = "response")
tm1_p <- ifelse(tm1_prob > 0.5,1,0)
m1df <- data.frame(ntest1$target, tm1_p, tm1_prob, row.names = NULL)
names(m1df) <- c("Actual", "Predicted", "Probability")
crime.split <- createDataPartition(y = crime.training$target, p = 0.7, list = F)
ntrain1 <- crime.training[crime.split, ]
ntest1 <- crime.training[-crime.split, ]
tm1 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain1)
tm1_prob <- predict(object = tm1, newdata = ntest1, type = "response")
tm1_p <- ifelse(tm1_prob > 0.5,1,0)
m1df <- data.frame(ntest1$target, tm1_p, tm1_prob, row.names = NULL)
names(m1df) <- c("Actual", "Predicted", "Probability")
roc_curve <- function(dataset){
thrshld <- seq(from = 0, to = 1, by = 0.01)
# Sum totals of positives and negatives in the true column
P <- sum(dataset$Actual == 1)
N <- sum(dataset$Actual == 0)
# Ensure there's at least one of each classifier
stopifnot(P > 0, N > 0)
dataset <- arrange(dataset, desc(Probability))
# Initialize TPR, FPR, and temporary threshold vectors
tpr <- c()
fpr <- c()
tt <- integer(nrow(dataset))
for (i in 1:length(thrshld)){
tt <- ifelse(dataset$Probability > thrshld[i], 1, 0)
# Calculate Sensitivity and Specificity
TP <- sum(dataset$Actual == 1 & tt == 1)
TN <- sum(dataset$Actual == 0 & tt == 0)
FP <- sum(dataset$Actual == 0 & tt == 1)
FN <- sum(dataset$Actual == 1 & tt == 0)
sens <- (TP) / (P)
spec <- (TN) / (N)
tpr[i] <- sens
fpr[i] <- 1 - spec
}
# Store results in a dataframe
df <- data.frame(fpr, tpr)
# Calculate the area under the ROC curve
dfpr <- c(diff(df$fpr), 0)
dtpr <- c(diff(df$tpr), 0)
roc_auc <- abs(sum(tpr * dfpr) + sum(dtpr * dfpr)/2)
# Store variable for roc curve plot
roc_curve_plot <- ggplot(df, aes(x = fpr, y = tpr, ymin = 0, ymax = tpr, xmin = 0, xmax = 1)) +
geom_abline(intercept = 0, slope = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
labs(title=paste0("ROC Curve w/ AUC=", roc_auc), x = "False Positive Rate (1 - Specificity)", y = "True Positive Rate (Sensitivity)") +
annotate("text", x = 0.5, y = 0.375, label = paste("AUC = ", round(roc_auc, 4)))
roc_curve <- list(roc_curve_plot, roc_auc)
return(roc_curve)
}
roc_curve(m1df)[[2]]
roc(m1df$Actual, m1df$Predicted)
roc(m1df$Actual, m1df$Predicted)
roc(m2df$Actual, m2df$Predicted)
roc_curve(m2df)[[2]]
auc(m1df$Actual, m1df$Predicted, levels = c(0, 1), direction = "<")
auc(m2df$Actual, m2df$Predicted, levels = c(0, 1), direction = "<")
?roc
auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<")
roc_curve(m2df)[[2]]
c1
c1 <- c(round(model1$aic, 2), round(BIC(model1), 2), round(model1$null.deviance - model1$deviance, 2), pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c1
c1 <- c(round(model1$aic, 2), round(BIC(model1), 2), round(model1$null.deviance - model1$deviance, 2), pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c2 <- c(round(model2$aic, 2), round(BIC(model2), 2), round(model2$null.deviance - model2$deviance, 2), pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), roc_curve(m2df)[[2]])
c3 <- c(round(model3$aic, 2), round(BIC(model3), 2), round(model3$null.deviance - model3$deviance, 2), pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), roc_curve(m3df)[[2]])
rnames <- c("AIC", "BIC", "Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
kable(cbind(rnames, c1, c2, c3), format = "latex", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
c3
c2
d1
c1
cbind(rnames, c1, c2, c3)
kable(cbind(rnames, c1, c2, c3), format = "latex", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
rm(test)
View(m1c)
View(m1c)
rm(m1c)
kable(cbind(rnames, c1, c2, c3), format = "html", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3"))# %>%
#kable_styling(latex_options = c("striped"))
kable(cbind(rnames, c1, c2, c3), format = "html", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3"))# %>%
#kable_styling(latex_options = c("striped"))
roc_curve(m1df)[[2]]
c1 <- c(model1$aic, BIC(model1), model1$null.deviance - model1$deviance, pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c2 <- c(model2$aic, BIC(model2), model2$null.deviance - model2$deviance, pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), roc_curve(m2df)[[2]])
c3 <- c(model3$aic, BIC(model3), model3$null.deviance - model3$deviance, pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), roc_curve(m3df)[[2]])
rnames <- c("AIC", "BIC", "Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
lapply(c(c1,c2,c3), function(x) round(x, 2))
mapply(c(c1,c2,c3), function(x) round(x, 2))
mapply(function(x) round(x, 2), c1, c2, c3)
mapply(function(x) round(x, 2), c(c1, c2, c3))
c1 <- c(model1$aic, BIC(model1), model1$null.deviance - model1$deviance, pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c2 <- c(model2$aic, BIC(model2), model2$null.deviance - model2$deviance, pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), roc_curve(m2df)[[2]])
c3 <- c(model3$aic, BIC(model3), model3$null.deviance - model3$deviance, pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), roc_curve(m3df)[[2]])
rnames <- c("AIC", "BIC", "Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
mapply(function(x) round(x, 2), c(c1, c2, c3))
c2
mapply(function(x) round(x, 2), c(c1, c2, c3))
c1
c(c1,c2,c3)
kable(cbind(rnames, mapply(function(x) round(x, 2), c(c1, c2, c3))), format = "html", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3"))# %>%
#kable_styling(latex_options = c("striped"))
test <- mapply(function(x) round(x, 2), c(c1, c2, c3))
test
c1
x2
c2
cbind(rnames, test)
rbind(rnames, test)
test
c1
c2
?do.call
test <- do.call(function(x) round(x, 2), c(c1, c2, c3))
test <- do.call(function(x) round(x, 2), list(c(c1, c2, c3)))
test
rm(test)
rounded <- mapply(function(x) round(x, 2), c(c1, c2, c3))
rounded[1:10]
rounded <- mapply(function(x) round(x, 4), c(c1, c2, c3))
rounded[1:10]
roc_curve(m1df)[[2]]
View(crime.dict)
hist(crime.training$rad)
table(crime.training$rad)
table(crime.training$ptratio)
summary(crime.training)
cor(crime.training$rad, crime.training$tax)
cor(crime.training$target, crime.training$tax)
cor(crime.training$tax, crime.training$target)
View(crime.training)
View(crime.training.copy)
c1
rounded
rounded <- mapply(function(x) round(x, 4), c(c1, c2, c3))
kable(cbind(rnames, rounded[1:10], rounded[11:20], rounded[21:30]), format = "latex", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
install.packages(c("callr", "caret", "ddalpha", "forecast", "glmnet", "kableExtra", "lmtest", "lubridate", "maps", "network", "selectr", "XLConnect", "XLConnectJars"))
install.packages("quantmod")
setwd("~/GitHub/DATA_605/Discussion 11")
install.packages(c("classInt", "quanteda", "tseries", "XML"))
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T, cache = T)
ins <- read.csv("insurance.csv")
View(ins)
psych::describe(ins)
?describe
any(is.na(ins))
is.na(ins)
summary(ins)
?summary
any(is.na(ins))
library(tidyverse)
View(ins)
defs <- c("An integer indicating the age of the primary beneficiary (excluding those above 64 years, since they are generally covered by the government)", "The policy holder's gender, either male or female", "The body mass index (BMI), which provides a sense of how over- or
under-weight a person is relative to their height. BMI is equal to weight (in
kilograms) divided by height (in meters) squared. An ideal BMI is within the
range of 18.5 to 24.9", "An integer indicating the number of children/dependents covered
by the insurance plan", "A yes or no categorical variable that indicates whether the insured
regularly smokes tobacco", "The beneficiary's place of residence in the US, divided into four
geographic regions: northeast, southeast, southwest, or northwest")
ins.dict <- data.frame(names(ins), defs, "Outcome variable", stringsAsFactors = F)
names(ins.dict) <- c("Variable Name", "Definition")
View(ins)
defs <- c("An integer indicating the age of the primary beneficiary (excluding those above 64 years, since they are generally covered by the government)", "The policy holder's gender, either male or female", "The body mass index (BMI), which provides a sense of how over- or
under-weight a person is relative to their height. BMI is equal to weight (in
kilograms) divided by height (in meters) squared. An ideal BMI is within the
range of 18.5 to 24.9", "An integer indicating the number of children/dependents covered
by the insurance plan", "A yes or no categorical variable that indicates whether the insured
regularly smokes tobacco", "The beneficiary's place of residence in the US, divided into four
geographic regions: northeast, southeast, southwest, or northwest", "Target variable")
ins.dict <- data.frame(names(ins), defs, "Outcome variable", stringsAsFactors = F)
names(ins.dict) <- c("Variable Name", "Definition")
View(ins.dict)
defs <- c("An integer indicating the age of the primary beneficiary (excluding those above 64 years, since they are generally covered by the government)", "The policy holder's gender, either male or female", "The body mass index (BMI), which provides a sense of how over- or
under-weight a person is relative to their height. BMI is equal to weight (in
kilograms) divided by height (in meters) squared. An ideal BMI is within the
range of 18.5 to 24.9", "An integer indicating the number of children/dependents covered
by the insurance plan", "A yes or no categorical variable that indicates whether the insured
regularly smokes tobacco", "The beneficiary's place of residence in the US, divided into four
geographic regions: northeast, southeast, southwest, or northwest", "Target variable")
ins.dict <- data.frame(names(ins), defs, stringsAsFactors = F)
names(ins.dict) <- c("Variable Name", "Definition")
View(ins.dict)
defs <- c("An integer indicating the age of the primary beneficiary (excluding those above 64 years, since they are generally covered by the government)", "The policy holder's gender, either male or female", "The body mass index (BMI), which provides a sense of how over- or
under-weight a person is relative to their height. BMI is equal to weight (in
kilograms) divided by height (in meters) squared. An ideal BMI is within the
range of 18.5 to 24.9", "An integer indicating the number of children/dependents covered
by the insurance plan", "A yes or no categorical variable that indicates whether the insured
regularly smokes tobacco", "The beneficiary's place of residence in the US, divided into four
geographic regions: northeast, southeast, southwest, or northwest", "Dependent variable - measures the medical costs
each person charged to the insurance plan for the year")
ins.dict <- data.frame(names(ins), defs, stringsAsFactors = F)
names(ins.dict) <- c("Variable Name", "Definition")
View(ins.dict)
View(ins)
ins.bp <- ins %>%
select(-charges) %>%
gather()
summary.boxplot <- ggplot(ins.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
View(ins.bp)
View(summary.boxplot)
boxplot(ins[1:6])
ggplot(mpg, aes(class, hwy))+ geom_boxplot()
View(ins)
ggplot(ins)+ geom_boxplot()
ggplot(ins, aes())+ geom_boxplot()
ggplot(ins, aes(age, charges))+ geom_boxplot()
ins.bp <- ins %>%
select(-charges) %>%
gather()
ggplot(ins.bp, aes(x = key, y = value))
ins <- read.csv("insurance.csv", stringsAsFactors = F)
ins.bp <- ins %>%
select(-charges) %>%
gather()
summary.boxplot <- ggplot(ins.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
ins <- read.csv("insurance.csv")
View(ins.bp)
ins.bp <- ins %>%
select(-charges) %>%
gather()
summary.boxplot <- ggplot(ins.bp[, c(1, 3, 4)], aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
ins.bp <- ins %>%
select(-c(2, 4:6)) %>%
gather()
summary.boxplot <- ggplot(ins.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
ins.bp <- ins %>%
select(-c(2, 5:7)) %>%
gather()
summary.boxplot <- ggplot(ins.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
ins.hist <- ggplot(data = ins.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.hist <- ggplot(data = ins, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.hist <- ggplot(data = ins.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.hist <- ggplot(data = ins.bp, mapping = aes(x = value)) +
geom_bar(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.hist <- ggplot(data = ins.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.h <- ins %>%
select(-7) %>%
gather()
ins.hist <- ggplot(data = ins.h, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.h <- ins %>%
select(-7) %>%
gather()
ins.hist <- ggplot(data = ins.h, mapping = aes(x = value)) +
geom_histogram(bins = 10, stat = count) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.h <- ins %>%
select(-7) %>%
gather()
ins.hist <- ggplot(data = ins.h, mapping = aes(x = value)) +
geom_histogram(bins = 10, stat = "count") +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.h <- ins %>%
select(-c(2, 5, 6)) %>%
gather()
ins.hist <- ggplot(data = ins.h, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.h <- ins %>%
select(c(1,3,4)) %>%
gather()
ins.hist <- ggplot(data = ins.h, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
barplot(ins$age)
plot(ins$age)
barplot(table(ins$age))
ins.h <- ins %>%
select(c(1, 3, 7)) %>%
gather()
ins.hist <- ggplot(data = ins.h, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ins.hist
ins.b <- ins %>%
select(c(2, 4:6)) %>%
gather()
ins.bar <- ggplot(data = ins.b, mapping = aes(x = value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
ins.bar
library(corrplot)
corrplot(cor(ins), method = "color", type = "lower")
corrplot(cor(ins), method = "color", type = "lower")
cor(ins)
?corrplot
corrplot(cor(ins[,-7]), method = "color", type = "lower")
str(ins)
View(ins)
cor(ins[-7])[,"charges"]
cor.test(ins)
cor.test(ins[,-7], ins[,7])
apply(ins[, -7], 2, function(x) cor.test(x, y=ins$charges)$p.value)
ins <- read.csv("insurance.csv", stringsAsFactors = F)
("insurance.csv", stringsAsFactors = F)
ins <- read.csv("insurance.csv", stringsAsFactors = F)
str(ins)
cor(ins)
ins <- read.csv("insurance.csv")
test <- apply(ins, function(x) as.numeric(x))
test <- apply(ins, 2, function(x) as.numeric(x))
test <- mutate_each(ins, funs(as.numeric), 1:7)
test <- mutate_at(ins, funs(as.numeric), 1:7)
test <- mutate_at(ins, funs(as.numeric))
?mutate_at
test <- mutate_al(ins, funs(as.numeric))
test <- mutate_all(ins, funs(as.numeric))
View(test)
str(test)
cor(ins)
cor(test)
rm(test)
ins.c <- mutate_all(ins, funs(as.numeric))
corrplot(cor(ins.c[,-7]), method = "color", type = "lower")
corrplot(cor(ins.c), method = "color", type = "lower")
corp <- apply(ins.c[, -7], 2, function(x) cor.test(x, y=ins.c$charges)$p.value)
cortable <- cor(ins.c[, -7], ins.c$charges)
kable(cbind(as.character(corp), cortable))
corp <- apply(ins.c[, -7], 2, function(x) cor.test(x, y=ins.c$charges)$p.value)
cortable <- cor(ins.c[, -7], ins.c$charges)
knitr::kable(cbind(as.character(corp), cortable))
rm(corp, cortable)
corp <- apply(ins.c[, -7], 2, function(x) cor.test(x, y=ins.c$charges)$p.value)
cortable <- cor(ins.c[, 7], ins.c$charges)
kable(cbind(as.character(corp), cortable), col.names = c("P-value", "Correlation with dependent"))
library(knitr)
corp <- apply(ins.c[, -7], 2, function(x) cor.test(x, y=ins.c$charges)$p.value)
cortable <- cor(ins.c[, 7], ins.c$charges)
kable(cbind(as.character(corp), cortable), col.names = c("P-value", "Correlation with dependent"))
corp <- apply(ins.c[, -7], 2, function(x) cor.test(x, y=ins.c$charges)$p.value)
cortable <- cor(ins.c[, -7], ins.c$charges)
kable(cbind(as.character(corp), cortable), col.names = c("P-value", "Correlation with dependent"))
str(ins)
ins.bp <- ins %>%
select(-c(2, 4:7)) %>%
gather()
summary.boxplot <- ggplot(ins.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
ins.bp <- ins %>%
select(c(1, 3)) %>%
gather()
summary.boxplot <- ggplot(ins.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Insurance Data Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot

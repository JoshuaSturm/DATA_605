knitr::opts_chunk$set(echo = T, warning = F, message = F)
u <- c(0.5, 0.5)
v <- c(3,-4)
udotv <- drop(u %*% v) # The drop function is used to remove dimensions > 1
udotv
normu <- sqrt(u[1]^2 + u[2]^2)
normv <- sqrt(v[1]^2 + v[2]^2)
normu
normv
c(3*u - 2*v)
matsolver <- function(a, b){
# Assume a is the matrix, and b is the constrain.
# Merge the two into an augmented matrix
augmm <- cbind(a, b)
# Need a 1 in position [1,1]
if (augmm[1,1] == 0){
if (augmm[2,1] != 0){
augmm <- augmm[c(2,1,3),]
}
else {
augmm <- augmm[c(3,2,1),]
}
}
else if (augmm[1,1] != 1){
augmm[1,] <- augmm[1,] / augmm[1,1]
}
# All other rows in column 1 should be zero
if (augmm[2,1] != 0){
augmm[2,] <- (augmm[2,1] * augmm[1,]) - augmm[2,]
}
if (augmm[3,1] != 0){
augmm[3,] <- (augmm[3,1] * augmm[1,]) - augmm[3,]
}
#Need a non-zero number in the middle
if (augmm[2,2] == 0){
augmm <- augmm[c(1,3,2),]
}
augmm[2,] <- augmm[2,] / augmm[2,2]
augmm[3,] <- (augmm[3,2] * augmm[2,]) - augmm[3,]
# Use back substitution
solvedm <- numeric(3)
solvedm[3] <- augmm[3,4] / augmm[3,3]
solvedm[2] <- (augmm[2,4] - augmm[2,3] * solvedm[3]) / augmm[2,2]
solvedm[1] <- (augmm[1,4] - augmm[1,2] * solvedm[2] - augmm[1,3] * solvedm[3]) / augmm[1,1]
return(rbind(solvedm))
}
matsolver <- function(a, b){
# Assume a is the matrix, and b is the constrain.
# Merge the two into an augmented matrix
augmm <- cbind(a, b)
# Need a 1 in position [1,1]
if (augmm[1,1] == 0){
if (augmm[2,1] != 0){
augmm <- augmm[c(2,1,3),]
}
else {
augmm <- augmm[c(3,2,1),]
}
}
else if (augmm[1,1] != 1){
augmm[1,] <- augmm[1,] / augmm[1,1]
}
# All other rows in column 1 should be zero
if (augmm[2,1] != 0){
augmm[2,] <- (augmm[2,1] * augmm[1,]) - augmm[2,]
}
if (augmm[3,1] != 0){
augmm[3,] <- (augmm[3,1] * augmm[1,]) - augmm[3,]
}
#Need a non-zero number in the middle
if (augmm[2,2] == 0){
augmm <- augmm[c(1,3,2),]
}
augmm[2,] <- augmm[2,] / augmm[2,2]
augmm[3,] <- (augmm[3,2] * augmm[2,]) - augmm[3,]
# Use back substitution
solvedm <- numeric(3)
solvedm[3] <- augmm[3,4] / augmm[3,3]
solvedm[2] <- (augmm[2,4] - augmm[2,3] * solvedm[3]) / augmm[2,2]
solvedm[1] <- (augmm[1,4] - augmm[1,2] * solvedm[2] - augmm[1,3] * solvedm[3]) / augmm[1,1]
return(rbind(solvedm))
}
a<- matrix(
c(1, 2, -1, 1, -1, -2, 3, 5, 4),
nrow=3,
ncol=3)
b<- matrix(
c(1, 2, 6),
nrow=3,
ncol=1)
matsolver(a,b)
matsolver <- function(a, b){
# Assume a is the matrix, and b is the constrain.
# Merge the two into an augmented matrix
augmm <- cbind(a, b)
# Need a 1 in position [1,1]
if (augmm[1,1] == 0){
if (augmm[2,1] != 0){
augmm <- augmm[c(2,1,3),]
}
else {
augmm <- augmm[c(3,2,1),]
}
}
else if (augmm[1,1] != 1){
augmm[1,] <- augmm[1,] / augmm[1,1]
}
# All other rows in column 1 should be zero
if (augmm[2,1] != 0){
augmm[2,] <- (augmm[2,1] * augmm[1,]) - augmm[2,]
}
if (augmm[3,1] != 0){
augmm[3,] <- (augmm[3,1] * augmm[1,]) - augmm[3,]
}
#Need a non-zero number in the middle
if (augmm[2,2] == 0){
augmm <- augmm[c(1,3,2),]
}
augmm[2,] <- augmm[2,] / augmm[2,2]
augmm[3,] <- (augmm[3,2] * augmm[2,]) - augmm[3,]
# Use back substitution
solvedm <- numeric(3)
solvedm[3] <- augmm[3,4] / augmm[3,3]
solvedm[2] <- (augmm[2,4] - augmm[2,3] * solvedm[3]) / augmm[2,2]
solvedm[1] <- (augmm[1,4] - augmm[1,2] * solvedm[2] - augmm[1,3] * solvedm[3]) / augmm[1,1]
return(cbind(solvedm))
}
matsolver(a,b)

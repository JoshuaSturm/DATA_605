"proportion of owner-occupied units built prior to 1940",
"weighted mean of distances to five Boston employment centers",
"index of accessibility to radial highways", "full-value property-tax rate per $10,000",
"pupil-teacher ratio by town", "lower status of the population (percent)",
"median value of owner-occupied homes in $1000s")
crime.dict <- data.frame(names(crime), defs, "Outcome variable", stringsAsFactors = F)
names(crime.dict) <- c("Variable Name", "Definition")
# Chunk 5: print-dictionary
kable(crime.dict, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 6: describe
crime.desc <- psych::describe(crime.training)
kable(crime.desc, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 8: summary-boxplot
crime.training.bp <- crime.training %>%
select(-target) %>%
gather()
summary.boxplot <- ggplot(crime.training.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Crime Data Training Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1)
summary.boxplot
# Chunk 9: summary-histogram
crime.training.hist <- ggplot(data = crime.training.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
crime.training.hist
# Chunk 10: summary-correlation-heatmap
crime.training.corr <- crime.training %>%
#select(-target) %>%
na.omit()
corrplot(cor(crime.training.corr), method = "color", type = "lower")
# Chunk 11: summary-correlation-table
# apply(crime.training[, -13], 2, cor.test, crime.training$target)
corp <- apply(crime.training[, -13], 2, function(x) cor.test(x, y=crime.training$target)$p.value)
cortable <- cor(crime.training[, -13], crime.training$target)
kable(cbind(as.character(corp), cortable), format = "latex", booktabs = T, col.names = c("P-value", "Correlation with response")) %>%
kable_styling(latex_options = c("striped"))
# Chunk 12: variable-transformation
crime.training$chas <- as.factor(crime.training$chas)
crime.training$target <- as.factor(crime.training$target)
crime$chas <- as.factor(crime$chas)
# Chunk 13: model-one
model1 <- glm(formula = target ~ .,
family = binomial(link = "logit"),
data = crime.training)
summary(model1)
# Chunk 14: mod-one-coeff
m1coef <- round(model1$coefficients[-1], 4)
m1e <- c("More large homes would indicate a wealthier neighbourhood (unless zn is referring to apartment buildings)", "More likely to be a suburban (rather than urban) neighbourhood", "I'm not familiar with the Boston area", "Higher pollution could be due to industry or a poorly-funded area, both of which attract crime", "More rooms means a larger home, which would mean a wealthier neighbourhood", "Older units are more likely to be occupied by lower-income residents, and lower-income neighbourhoods are more likely to have crime", "Neighbourhoods farther away from employment centers have higher crime, possibly due to unemployment", "Access to highways might indicate a more urban neighbourhood, which tend to have higher crime", "This one is unclear. Higher tax rate could be due to size of unit, or overall high tax rate for that area", "Higher ratio is more likely in poorly-funded districts, which tend to have higher crime", "Lower income neighbourhoods tend to have more crime", "Surprising that neighbourhoods with higher-valued homes had more crime")
kable(cbind(m1coef, m1e), format = "latex", booktabs = T, col.names = c("Coefficient", "Possible Reasoning")) %>%
kable_styling(latex_options = c("striped"), full_width = T) %>%
column_spec(3, width = "30em")
# Chunk 15: model-one-anova
anova(model1, test = "Chisq")
# Chunk 16: model-two
model2 <- glm(formula = target ~ . -indus -chas -rm -lstat,
family = binomial(link = "logit"),
data = crime.training)
summary(model2)
# Chunk 17: mod-two-coeff
m2coef <- round(model2$coefficients[-1], 4)
m2e <- c("More large homes would indicate a wealthier neighbourhood (unless zn is referring to apartment buildings)", "Higher pollution could be due to industry or a poorly-funded area, both of which attract crime", "Older units are more likely to be occupied by lower-income residents, and lower-income neighbourhoods are more likely to have crime", "Neighbourhoods farther away from employment centers have higher crime, possibly due to unemployment", "Access to highways might indicate a more urban neighbourhood, which tend to have higher crime", "This one is unclear. Higher tax rate could be due to size of unit, or overall high tax rate for that area", "Higher ratio is more likely in poorly-funded districts, which tend to have higher crime", "Surprising that neighbourhoods with higher-valued homes had more crime")
kable(cbind(m2coef, m2e), format = "latex", booktabs = T, col.names = c("Coefficient", "Possible Reasoning")) %>%
kable_styling(latex_options = c("striped"), full_width = T) %>%
column_spec(3, width = "30em")
# Chunk 18: model-two-anova
anova(model2, test = "Chisq")
# Chunk 19: transform-zn
crime.training.copy <- crime.training[, -c(2, 3, 5, 11)]
crime.training.copy$zn <- ifelse(crime.training.copy$zn == "0", 0, 1) %>%
as.factor()
# Chunk 20: model-three
model3 <- glm(formula = target ~ .,
family = binomial(link = "logit"),
data = crime.training.copy)
summary(model3)
# Chunk 21: models-anova
anova(model1, model2, model3, test = "Chisq")
# Chunk 22: split-data
crime.split <- createDataPartition(y = crime.training$target, p = 0.7, list = F)
ntrain1 <- crime.training[crime.split, ]
ntest1 <- crime.training[-crime.split, ]
# Chunk 23: test-model-one
tm1 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain1)
tm1_p <- predict(object = tm1, newdata = ntest1, type = "response")
tm1_p <- ifelse(tm1_p > 0.5,1,0)
m1df <- data.frame(ntest1$target, tm1_p, row.names = NULL)
names(m1df) <- c("Actual", "Predicted")
# Chunk 24: test-model-two
ntrain2 <- crime.training[crime.split, -c(2, 3, 5, 11)]
ntest2 <- crime.training[-crime.split, -c(2, 3, 5, 11)]
tm2 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain2)
tm2_p <- predict(object = tm2, newdata = ntest2, type = "response")
tm2_p <- ifelse(tm2_p > 0.5,1,0)
m2df <- data.frame(ntest2$target, tm2_p, row.names = NULL)
names(m2df) <- c("Actual", "Predicted")
ntrain3 <- crime.training.copy[crime.split, -c(2, 3, 5, 11)]
ntest3 <- crime.training.copy[-crime.split, -c(2, 3, 5, 11)]
tm3 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain3)
tm3_p <- predict(object = tm3, newdata = ntest3, type = "response")
tm3_p <- ifelse(tm3_p > 0.5,1,0)
m3df <- data.frame(ntest3$target, tm3_p, row.names = NULL)
names(m3df) <- c("Actual", "Predicted")
roc_auc(m1df)
pROC::auc(m1df$Actual, m1df$Predicted)
roc_auc(m1df$Actual, m1df$Predicted)
View(m1df)
library(pROC)
c1 <- c(pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), auc(m1df$Actual, m1df$Predicted))
c2 <- c(pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), auc(m2df$Actual, m2df$Predicted))
kable(c(c1, c2, c3), format = "latex", booktabs = T, col.names = c("Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
c1 <- c(pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), auc(m1df$Actual, m1df$Predicted))
c2 <- c(pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), auc(m2df$Actual, m2df$Predicted))
c3 <- c(pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), auc(m3df$Actual, m3df$Predicted))
kable(c(c1, c2, c3), format = "latex", booktabs = T, col.names = c("Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
kable(c1, c2, c3, format = "latex", booktabs = T, col.names = c("Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
kable(cbind(c1, c2, c3), format = "latex", booktabs = T, col.names = c("Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
rnames <- c("AIC, BIC, Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
kable(cbind(c1, c2, c3), format = "latex", booktabs = T, col.names = c("Model 1", "Model 2", "Model 3"), row.names = rnames) %>%
kable_styling(latex_options = c("striped"))
tm1 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain1)
tm1_prob <- predict(object = tm1, newdata = ntest1, type = "response")
tm1_p <- ifelse(tm1_prob > 0.5,1,0)
m1df <- data.frame(ntest1$target, tm1_p, tm1_prob, row.names = NULL)
names(m1df) <- c("Actual", "Predicted", "Probability")
ntrain2 <- crime.training[crime.split, -c(2, 3, 5, 11)]
ntest2 <- crime.training[-crime.split, -c(2, 3, 5, 11)]
tm2 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain2)
tm2_prob <- predict(object = tm2, newdata = ntest2, type = "response")
tm2_p <- ifelse(tm2_prob > 0.5,1,0)
m2df <- data.frame(ntest2$target, tm2_p, tm2_prob, row.names = NULL)
names(m2df) <- c("Actual", "Predicted", "Probability")
ntrain3 <- crime.training.copy[crime.split, -c(2, 3, 5, 11)]
ntest3 <- crime.training.copy[-crime.split, -c(2, 3, 5, 11)]
tm3 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain3)
tm3_prob <- predict(object = tm3, newdata = ntest3, type = "response")
tm3_p <- ifelse(tm3_prob > 0.5,1,0)
m3df <- data.frame(ntest3$target, tm3_p, tm3_prob, row.names = NULL)
names(m3df) <- c("Actual", "Predicted", "Probability")
roc_curve <- function(dataset){
thrshld <- seq(from = 0, to = 1, by = 0.01)
# Sum totals of positives and negatives in the true column
P <- sum(dataset$class == 1)
N <- sum(dataset$class == 0)
# Ensure there's at least one of each classifier
stopifnot(P > 0, N > 0)
dataset <- arrange(dataset, desc(Probability))
# Initialize TPR, FPR, and temporary threshold vectors
tpr <- c()
fpr <- c()
tt <- integer(nrow(dataset))
for (i in 1:length(thrshld)){
tt <- ifelse(dataset$Probability > thrshld[i], 1, 0)
# Calculate Sensitivity and Specificity
TP <- sum(dataset$class == 1 & tt == 1)
TN <- sum(dataset$class == 0 & tt == 0)
FP <- sum(dataset$class == 0 & tt == 1)
FN <- sum(dataset$class == 1 & tt == 0)
sens <- (TP) / (P)
spec <- (TN) / (N)
tpr[i] <- sens
fpr[i] <- 1 - spec
}
# Store results in a dataframe
df <- data.frame(fpr, tpr)
# Calculate the area under the ROC curve
dfpr <- c(diff(df$fpr), 0)
dtpr <- c(diff(df$tpr), 0)
roc_auc <- abs(sum(tpr * dfpr) + sum(dtpr * dfpr)/2)
# Store variable for roc curve plot
roc_curve_plot <- ggplot(df, aes(x = fpr, y = tpr, ymin = 0, ymax = tpr, xmin = 0, xmax = 1)) +
geom_abline(intercept = 0, slope = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
labs(title=paste0("ROC Curve w/ AUC=", roc_auc), x = "False Positive Rate (1 - Specificity)", y = "True Positive Rate (Sensitivity)") +
annotate("text", x = 0.5, y = 0.375, label = paste("AUC = ", round(roc_auc, 4)))
roc_curve <- list(roc_curve_plot, roc_auc)
return(roc_curve)
}
roc_curve(m1df)
roc_curve <- function(dataset){
thrshld <- seq(from = 0, to = 1, by = 0.01)
# Sum totals of positives and negatives in the true column
P <- sum(dataset$Actual == 1)
N <- sum(dataset$Actual == 0)
# Ensure there's at least one of each classifier
stopifnot(P > 0, N > 0)
dataset <- arrange(dataset, desc(Probability))
# Initialize TPR, FPR, and temporary threshold vectors
tpr <- c()
fpr <- c()
tt <- integer(nrow(dataset))
for (i in 1:length(thrshld)){
tt <- ifelse(dataset$Probability > thrshld[i], 1, 0)
# Calculate Sensitivity and Specificity
TP <- sum(dataset$Actual == 1 & tt == 1)
TN <- sum(dataset$Actual == 0 & tt == 0)
FP <- sum(dataset$Actual == 0 & tt == 1)
FN <- sum(dataset$Actual == 1 & tt == 0)
sens <- (TP) / (P)
spec <- (TN) / (N)
tpr[i] <- sens
fpr[i] <- 1 - spec
}
# Store results in a dataframe
df <- data.frame(fpr, tpr)
# Calculate the area under the ROC curve
dfpr <- c(diff(df$fpr), 0)
dtpr <- c(diff(df$tpr), 0)
roc_auc <- abs(sum(tpr * dfpr) + sum(dtpr * dfpr)/2)
# Store variable for roc curve plot
roc_curve_plot <- ggplot(df, aes(x = fpr, y = tpr, ymin = 0, ymax = tpr, xmin = 0, xmax = 1)) +
geom_abline(intercept = 0, slope = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
labs(title=paste0("ROC Curve w/ AUC=", roc_auc), x = "False Positive Rate (1 - Specificity)", y = "True Positive Rate (Sensitivity)") +
annotate("text", x = 0.5, y = 0.375, label = paste("AUC = ", round(roc_auc, 4)))
roc_curve <- list(roc_curve_plot, roc_auc)
return(roc_curve)
}
roc_curve(m1df)
auc(m1df$Actual, m1df$Predicted)
roc_curve(m2df)
roc_curve(m3df)
auc(m3df$Actual, m3df$Predicted)
View(m1df)
# ntrain3 <- crime.training.copy[crime.split, -c(2, 3, 5, 11)]
# ntest3 <- crime.training.copy[-crime.split, -c(2, 3, 5, 11)]
ntrain3 <- crime.training.copy[crime.split, ]
ntest3 <- crime.training.copy[-crime.split, ]
tm3 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain3)
tm3_prob <- predict(object = tm3, newdata = ntest3, type = "response")
tm3_p <- ifelse(tm3_prob > 0.5,1,0)
m3df <- data.frame(ntest3$target, tm3_p, tm3_prob, row.names = NULL)
names(m3df) <- c("Actual", "Predicted", "Probability")
auc(m3df$Actual, m3df$Predicted)
View(crime.dict)
View(crime.training.copy)
ntrain3 <- crime.training.copy[crime.split, -c(2, 3, 5, 11)]
ntest3 <- crime.training.copy[-crime.split, -c(2, 3, 5, 11)]
tm3 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain3)
tm3_prob <- predict(object = tm3, newdata = ntest3, type = "response")
tm3_p <- ifelse(tm3_prob > 0.5,1,0)
m3df <- data.frame(ntest3$target, tm3_p, tm3_prob, row.names = NULL)
names(m3df) <- c("Actual", "Predicted", "Probability")
View(m2df)
View(m1df)
View(m3df)
View(roc_curve)
roc_curve(m3df)
roc_curve(m2df)
test <- roc_curve(m3df)
View(test)
rm(test)
roc(m3df$Actual ~ m3df$Probability, plot = T, auc.polygon = T)
?auv
?auc
pROC::auc(m3df$Actual, m3df$Probability, levels = c(0, 1), direction = "<")
pROC::auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<")
roc_curve(m2df)
all.equal(auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<"), roc(m3df$Actual ~ m3df$Probability))
identical(auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<"), roc(m3df$Actual ~ m3df$Probability))
test <- auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<")
test
str(test)
test$auc
test[[2]]
test[1
test[1]
identical(test[1], roc(m3df$Actual ~ m3df$Probability))
roc(m3df$Actual ~ m3df$Probability
roc(m3df$Actual ~ m3df$Probability)
test1 <- roc(m3df$Actual ~ m3df$Probability)
View(test1)
identical(test[1], test1$auc)
all.equal(test[1], test1$auc)
test1$auc
test1$auc[1]
all.equal(test[1], test1$auc[1])
identical(test[1], test1$auc[1])
rm(test, test1)
test <- roc_curve(m3df)[2]
View(test)
test
test <- roc_curve(m3df)[[2]]
tets
test
roc(m3df$Actual ~ m3df$Probability)
roc_curve(m1df)[[2]]
tm1 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain1)
tm1_prob <- predict(object = tm1, newdata = ntest1, type = "response")
tm1_p <- ifelse(tm1_prob > 0.5,1,0)
m1df <- data.frame(ntest1$target, tm1_p, tm1_prob, row.names = NULL)
names(m1df) <- c("Actual", "Predicted", "Probability")
crime.split <- createDataPartition(y = crime.training$target, p = 0.7, list = F)
ntrain1 <- crime.training[crime.split, ]
ntest1 <- crime.training[-crime.split, ]
tm1 <- glm(target ~ .,
family = binomial(link = "logit"),
data = ntrain1)
tm1_prob <- predict(object = tm1, newdata = ntest1, type = "response")
tm1_p <- ifelse(tm1_prob > 0.5,1,0)
m1df <- data.frame(ntest1$target, tm1_p, tm1_prob, row.names = NULL)
names(m1df) <- c("Actual", "Predicted", "Probability")
roc_curve <- function(dataset){
thrshld <- seq(from = 0, to = 1, by = 0.01)
# Sum totals of positives and negatives in the true column
P <- sum(dataset$Actual == 1)
N <- sum(dataset$Actual == 0)
# Ensure there's at least one of each classifier
stopifnot(P > 0, N > 0)
dataset <- arrange(dataset, desc(Probability))
# Initialize TPR, FPR, and temporary threshold vectors
tpr <- c()
fpr <- c()
tt <- integer(nrow(dataset))
for (i in 1:length(thrshld)){
tt <- ifelse(dataset$Probability > thrshld[i], 1, 0)
# Calculate Sensitivity and Specificity
TP <- sum(dataset$Actual == 1 & tt == 1)
TN <- sum(dataset$Actual == 0 & tt == 0)
FP <- sum(dataset$Actual == 0 & tt == 1)
FN <- sum(dataset$Actual == 1 & tt == 0)
sens <- (TP) / (P)
spec <- (TN) / (N)
tpr[i] <- sens
fpr[i] <- 1 - spec
}
# Store results in a dataframe
df <- data.frame(fpr, tpr)
# Calculate the area under the ROC curve
dfpr <- c(diff(df$fpr), 0)
dtpr <- c(diff(df$tpr), 0)
roc_auc <- abs(sum(tpr * dfpr) + sum(dtpr * dfpr)/2)
# Store variable for roc curve plot
roc_curve_plot <- ggplot(df, aes(x = fpr, y = tpr, ymin = 0, ymax = tpr, xmin = 0, xmax = 1)) +
geom_abline(intercept = 0, slope = 1) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.2) +
labs(title=paste0("ROC Curve w/ AUC=", roc_auc), x = "False Positive Rate (1 - Specificity)", y = "True Positive Rate (Sensitivity)") +
annotate("text", x = 0.5, y = 0.375, label = paste("AUC = ", round(roc_auc, 4)))
roc_curve <- list(roc_curve_plot, roc_auc)
return(roc_curve)
}
roc_curve(m1df)[[2]]
roc(m1df$Actual, m1df$Predicted)
roc(m1df$Actual, m1df$Predicted)
roc(m2df$Actual, m2df$Predicted)
roc_curve(m2df)[[2]]
auc(m1df$Actual, m1df$Predicted, levels = c(0, 1), direction = "<")
auc(m2df$Actual, m2df$Predicted, levels = c(0, 1), direction = "<")
?roc
auc(m2df$Actual, m2df$Probability, levels = c(0, 1), direction = "<")
roc_curve(m2df)[[2]]
c1
c1 <- c(round(model1$aic, 2), round(BIC(model1), 2), round(model1$null.deviance - model1$deviance, 2), pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c1
c1 <- c(round(model1$aic, 2), round(BIC(model1), 2), round(model1$null.deviance - model1$deviance, 2), pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c2 <- c(round(model2$aic, 2), round(BIC(model2), 2), round(model2$null.deviance - model2$deviance, 2), pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), roc_curve(m2df)[[2]])
c3 <- c(round(model3$aic, 2), round(BIC(model3), 2), round(model3$null.deviance - model3$deviance, 2), pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), roc_curve(m3df)[[2]])
rnames <- c("AIC", "BIC", "Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
kable(cbind(rnames, c1, c2, c3), format = "latex", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
c3
c2
d1
c1
cbind(rnames, c1, c2, c3)
kable(cbind(rnames, c1, c2, c3), format = "latex", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
rm(test)
View(m1c)
View(m1c)
rm(m1c)
kable(cbind(rnames, c1, c2, c3), format = "html", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3"))# %>%
#kable_styling(latex_options = c("striped"))
kable(cbind(rnames, c1, c2, c3), format = "html", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3"))# %>%
#kable_styling(latex_options = c("striped"))
roc_curve(m1df)[[2]]
c1 <- c(model1$aic, BIC(model1), model1$null.deviance - model1$deviance, pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c2 <- c(model2$aic, BIC(model2), model2$null.deviance - model2$deviance, pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), roc_curve(m2df)[[2]])
c3 <- c(model3$aic, BIC(model3), model3$null.deviance - model3$deviance, pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), roc_curve(m3df)[[2]])
rnames <- c("AIC", "BIC", "Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
lapply(c(c1,c2,c3), function(x) round(x, 2))
mapply(c(c1,c2,c3), function(x) round(x, 2))
mapply(function(x) round(x, 2), c1, c2, c3)
mapply(function(x) round(x, 2), c(c1, c2, c3))
c1 <- c(model1$aic, BIC(model1), model1$null.deviance - model1$deviance, pred_acc(m1df), pred_err(m1df), pred_prec(m1df), pred_sens(m1df), pred_spec(m1df), pred_f1(m1df), roc_curve(m1df)[[2]])
c2 <- c(model2$aic, BIC(model2), model2$null.deviance - model2$deviance, pred_acc(m2df), pred_err(m2df), pred_prec(m2df), pred_sens(m2df), pred_spec(m2df), pred_f1(m2df), roc_curve(m2df)[[2]])
c3 <- c(model3$aic, BIC(model3), model3$null.deviance - model3$deviance, pred_acc(m3df), pred_err(m3df), pred_prec(m3df), pred_sens(m3df), pred_spec(m3df), pred_f1(m3df), roc_curve(m3df)[[2]])
rnames <- c("AIC", "BIC", "Deviance Diff", "Accuracy", "Error Rate", "Precision", "Sensitivity", "Specificity", "F1 Score", "AUC")
mapply(function(x) round(x, 2), c(c1, c2, c3))
c2
mapply(function(x) round(x, 2), c(c1, c2, c3))
c1
c(c1,c2,c3)
kable(cbind(rnames, mapply(function(x) round(x, 2), c(c1, c2, c3))), format = "html", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3"))# %>%
#kable_styling(latex_options = c("striped"))
test <- mapply(function(x) round(x, 2), c(c1, c2, c3))
test
c1
x2
c2
cbind(rnames, test)
rbind(rnames, test)
test
c1
c2
?do.call
test <- do.call(function(x) round(x, 2), c(c1, c2, c3))
test <- do.call(function(x) round(x, 2), list(c(c1, c2, c3)))
test
rm(test)
rounded <- mapply(function(x) round(x, 2), c(c1, c2, c3))
rounded[1:10]
rounded <- mapply(function(x) round(x, 4), c(c1, c2, c3))
rounded[1:10]
roc_curve(m1df)[[2]]
View(crime.dict)
hist(crime.training$rad)
table(crime.training$rad)
table(crime.training$ptratio)
summary(crime.training)
cor(crime.training$rad, crime.training$tax)
cor(crime.training$target, crime.training$tax)
cor(crime.training$tax, crime.training$target)
View(crime.training)
View(crime.training.copy)
c1
rounded
rounded <- mapply(function(x) round(x, 4), c(c1, c2, c3))
kable(cbind(rnames, rounded[1:10], rounded[11:20], rounded[21:30]), format = "latex", booktabs = T, col.names = c("Metric", "Model 1", "Model 2", "Model 3")) %>%
kable_styling(latex_options = c("striped"))
install.packages(c("callr", "caret", "ddalpha", "forecast", "glmnet", "kableExtra", "lmtest", "lubridate", "maps", "network", "selectr", "XLConnect", "XLConnectJars"))
install.packages("quantmod")
setwd("~/GitHub/DATA_605/Assignment 10")
((0.6/0.4)^3 - 1)/((0.6/0.4)^8 - 1)
((0.6/0.4)^1 - 1)/((0.6/0.4)^3 - 1)
install.packages("tikzDevice")
library(tikzDevice)
\documentclass[border=10pt]{standalone}
\usepackage{tikz}
\usetikzlibrary{positioning}
\begin{document}
\begin{tikzpicture}
[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
node distance =.8cm,
place/.style={rectangle,draw=blue!50,fill=blue!20,thick,
inner sep=0pt,minimum size=6mm}
]%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\node[place] (1) {$s_{1}$};
\node[place] (2) [right=of 1] {$s_{2}$};
\node[place] (3) [right=of 2] {$s_{3}$};
\node[place] (4) [right=of 3] {$s_{4}$};
\node[place] (5) [right=of 4] {$s_{5}$};
\draw [->,thick] (1.south west) to [bend left=55]  node[left]  {1}    (1.north west);
\draw [<-,thick] (1.north east) to [bend left=15]  node[above] {0.7}  (2.north west);
\draw [->,thick] (2.north east) to [bend left=15]  node[above] {0.3}  (3.north west);
\draw [->,thick] (3.north east) to [bend left=15]  node[above] {0.5}  (4.north west);
\draw [->,thick] (4.north east) to [bend left=15]  node[above] {0.35} (5.north west);
\draw [<-,thick] (3.south east) to [bend right=15] node[below] {0.65} (4.south west);
\draw [<-,thick] (2.south east) to [bend right=15] node[below] {0.5}  (3.south west);
\draw [->,thick] (5.north east) to [bend left=55]  node[right] {1}    (5.south east);
\end{tikzpicture}
\end{document}
\begin{tikzpicture}[node distance=20mm,
state/.style={
% The shape:
circle,minimum size=8mm,rounded corners=3mm,
% The rest
draw=black}]
% draw the nodes
\path (0,0)  node (A) [state] {A}
(4,0)  node (B) [state] {B}
(2,1)  node (D) [state] {D}
(2,-1) node (M) [state] {M};
% draw the transitions
\draw [->] (A) to [bend left=15] (D);
\draw [->] (D) to [bend left=15] (A);
\draw [->] (D) to [bend left=15] (B);
\draw [->] (B) to [bend left=15] (D);
\draw [->] (B) to [bend left=15] (M);
\draw [->] (M) to [bend left=15] (B);
\draw [->] (M) to [bend left=15] (A);
\draw [->] (A) to [bend left=15] (M);
\end{tikzpicture}
